"""
Дан список повторяющихся элементов. Вернуть список с дублирующимися элементами.
В результирующем списке не должно быть дубликатов.
"""

my_list = [1,5,3,7,53,57,345,2,5,1,3,7,57]

first_list = my_list.copy()
new_list = list(set(my_list))
result_list = []
for el in first_list:
    if el in new_list:
        my_list.pop(my_list.index(el))
        result_list.append(new_list.pop(new_list.index(el)))

print("Искомый:", first_list, "Результирующий:", result_list, "Дубликаты:", my_list, sep="\n")
"""
 В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых. 
 Не учитывать знаки препинания и регистр символов. За основу возьмите любую статью из википедии 
 или из документации к языку.
"""

text = """
PEP 8 — руководство по написанию кода на Python
Руководство по написанию кода — это документ, в котором описывается хорошая практика программирования, 
обычно применительно к одному языку. В некоторых компаниях существуют специальные руководства по стилю, 
которым сотрудники должны следовать независимо от того, какой язык программирования они используют.
Руководство по написанию кода Python было создано еще в 2001 году и получило название PEP8. В нем указаны 
соглашения по программированию на языке Python. За прошедшие годы текст несколько раз обновлялся.
Если вы планируете часто использовать Python, вам стоит ознакомиться с этим руководством. Оно поможет вам 
писать более качественный код на языке Python. Кроме того, если вы хотите внести вклад в развитие самого 
языка Python, ваш код должен соответствовать стилю руководства. Следование руководству сделает ваш код более 
легким для чтения и понимания. Это поможет вам и всем остальным, кто будет использовать ваш код в будущем.
Однако запомнить все правила может быть непросто. К счастью, некоторые бесстрашные разработчики создали 
определенные утилиты, которые могут помочь!
Полезные инструменты для документирования вашего кода
Существует множество инструментов, которые можно использовать для написания отличного кода. Вот всего несколько из них:
pycodestyle — Проверяет, если ваш код соответствует стандарту PEP8;
Pylint — Инструмент для углубленного статического тестирования кода, который находит общие проблемы в коде;
PyFlakes — Еще один инструмент для статического тестирования кода;
flake8 — Обертка для PyFlakes, pycodestyle и McCabe;
Black — Форматировщик кода, который в основном следует стандарту PEP8.
Вы можете использовать эти инструменты, чтобы найти проблемные места в вашем коде. Pylint, PyFlakes и flake8 
кажутся мне наиболее полезными. Black пригодится, если вы работаете в команде и хотите, чтобы код каждого 
сотрудника был написан в одном формате. Можете добавить Black в свой список инструментов форматирования кода.
Более продвинутые IDE для Python делают определенные проверки в режиме реального времени. Например, PyCharm 
автоматически проверяет многие проблемы, которые фиксируют эти инструменты. WingIDE и VS Code также обеспечивают некоторую проверку кода. Можете просто попробовать различные IDE и посмотреть, что подойдет вам лучше всего.
Подведем итоги
В Python есть несколько различных способов документирования кода. Вы можете использовать комментарии, чтобы 
объяснить одну или несколько строк кода. Их следует использовать умеренно и по мере необходимости. Вы также 
можете использовать docstring, чтобы документировать модули, функции, методы и классы.
Вам также следует ознакомиться с руководством по программированию на Python, которое можно найти в PEP8. 
Это поможет разобраться в принципах хорошего программирования на Python. Существует несколько других 
руководств по стилю написания кода на Python. Например, руководство по стилю от Google или руководство по 
стилю Python от NumPy. Иногда ознакомление с различными руководствами может помочь развить свой собственный 
хороший стиль программирования.
Мы также познакомились с несколькими инструментами, которые можно использовать для улучшения вашего кода. 
Если у вас есть время, я советую вам ознакомиться с PyFlakes или Flake8, так как они могут помочь найти 
общие проблемы в вашем коде.
"""
text.lower()
text_list = text.split()
for el in text_list.copy():
    if not el.isalnum():
        text_list.remove(el)

top_word = {}
for el in set(text_list):
    top_word[el] = text_list.count(el)

top_word_sort = sorted(top_word.items(), key=lambda item: item[1], reverse=True)

i = 0
print("Топ 10 слов:")
for key, val in top_word_sort:
    i += 1
    print(f'{i}. "{key}" - встречается {val} раз')
    if i == 10:
        break

"""
 Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения. 
 Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. 
 Достаточно вернуть один допустимый вариант.
 *Верните все возможные варианты комплектации рюкзака.
"""

from itertools import permutations

itms = {
    "Аптечка" : 0.3,
    "Палатка" : 2,
    "Спальник" : 1,
    "Фонарик" : 0.1,
    "Еда": 3,
    "Вода": 2,
    "Посуда": 0.3,
    "Дождевик": 0.2,
    "Котелок": 0.1,
    "Спички": 0.1
}

weight = float(input("Введите вес: "))
backpack = {}
true_weight = {}
temp = []

# Простой вариант:
# residual_weight = weight
# for el in itms:
#     if round(residual_weight, 2) >= itms[el]:
#         residual_weight -= itms[el]
#         backpack[el] = itms[el]

#Отсекаем заведомо тяжелые вещи
for el in itms:
    if itms[el] < weight:
        true_weight[el] = itms[el]

for i in range(len(true_weight)):
    for el in permutations(true_weight, i+1):
        temp.append(el)
vars_backpack = temp.copy()
for el in temp:
    weight_list = 0
    for item in el:
        weight_list += itms[item]
    if weight_list > weight: #в задании не сказано, что все варианты должны быть "под завязку", так что снизу не ограничиваем
        vars_backpack.pop(vars_backpack.index(el))

print(f"Все возможные варианты комплектации рюкзака максимальным весом до {weight} кг:")
for i, el in enumerate(vars_backpack, 1):
    print("Вариант", i)
    for num, item in enumerate(el, 1):
        print(f"{num}. {item} - {itms[item]} кг")













